- hosts: localhost
  gather_facts: false
  vars:
    hs_username: "{{ hsuser }}"
    hs_password: "{{ password }}"
    volume_group_name: "vg_test_auto"

  tasks:
    # 1. Get nodes
    - name: Get all nodes
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes"
        method: GET
        user: "{{ hs_username }}"
        password: "{{ hs_password }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
        status_code: 200
        body_format: json
      register: nodes_response

    # 2. Get volume groups
    - name: Get all volume groups
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/volume-groups"
        method: GET
        user: "{{ hs_username }}"
        password: "{{ hs_password }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
        status_code: 200
        body_format: json
      register: volume_groups_response

    # 3. Extract current node and volume group names
    - name: Extract existing node and volume group names
      set_fact:
        existing_node_names: "{{ nodes_response.json | map(attribute='name') | list }}"
        vg_names: "{{ volume_groups_response.json | map(attribute='name') | list }}"

    # 4. Add missing nodes only
    - name: Add storage system if not present
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes"
        user: "{{ hsuser }}"
        password: "{{ password }}"
        method: POST
        body: '{{ storage }}'
        force_basic_auth: yes
        status_code: 202
        body_format: json
        validate_certs: no
        timeout: 180
      loop: "{{ storages }}"
      loop_control:
        loop_var: storage
      when: storage.name not in existing_node_names and storage.nodeType == "OTHER"
      register: node_add

    # 5. Wait for all required nodes to be present
    - name: Wait for all required nodes to be present
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes/{{ node_name | urlencode }}"
        user: "{{ hsuser }}"
        password: "{{ password }}"
        method: GET
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      register: node_check
      until: node_check.status == 200
      retries: 10
      delay: 5
      loop: "{{ storages | selectattr('nodeType', 'equalto', 'OTHER') | map(attribute='name') | list }}"
      loop_control:
        loop_var: node_name

    # 6. Filter nodes with nodeType OTHER
    - name: Filter nodes with nodeType OTHER
      set_fact:
        other_nodes: "{{ nodes_response.json | selectattr('nodeType', 'equalto', 'OTHER') | list }}"

    # 7. Prepare node list for volume group
    - name: Build node locations for volume group
      set_fact:
        vg_node_locations: >-
          [{% for node in other_nodes %}
            {
              "_type": "NODE_LOCATION",
              "node": {
                "_type": "NODE",
                "name": "{{ node.name }}"
              }
            }{% if not loop.last %},{% endif %}
          {% endfor %}]

    # 8. Create the volume group if missing
    - name: Create a volume group with OTHER nodes (if missing)
      uri:
        url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/volume-groups"
        user: "{{ hsuser }}"
        password: "{{ password }}"
        method: POST
        body: >-
          {{
            {
              "name": volume_group_name,
              "_type": "VOLUME_GROUP",
              "expressions": [
                {
                  "operator": "IN",
                  "locations": vg_node_locations
                }
              ]
            }
          }}
        force_basic_auth: yes
        status_code: 200
        body_format: json
        validate_certs: no
      register: volume_group_create_result
      when: vg_node_locations | length > 0 and volume_group_name not in vg_names

    # 9. Extract non-reserved logical volumes from OTHER nodes
    - name: Extract non-reserved logical volumes from OTHER nodes
      set_fact:
        non_reserved_volumes: >-
          {{
            other_nodes
            | map(attribute='platformServices')
            | flatten
            | selectattr('_type', 'equalto', 'LOGICAL_VOLUME')
            | selectattr('reserved', 'equalto', false)
            | list
          }}

    # 10. Show found volumes for next task
    - name: Display found volumes for next task
      debug:
        msg: "Export Path: {{ item.exportPath }} | Node: {{ item.node.name }}"
      loop: "{{ non_reserved_volumes }}"
      loop_control:
        label: "{{ item.name }}"
      when: non_reserved_volumes | length > 0

    # 11. Create volume variables for each non-reserved volume
    - name: Create volume variables for each non-reserved volume
      set_fact:
        volumes_for_next_task: >-
          [{% for item in non_reserved_volumes %}
            {
              "name": "{{ item.node.name }}::{{ item.exportPath }}",
              "logicalVolume": {
                "name": "{{ item.exportPath }}",
                "_type": "LOGICAL_VOLUME"
              },
              "node": {
                "name": "{{ item.node.name }}",
                "_type": "NODE"
              },
              "_type": "STORAGE_VOLUME",
              "accessType": "READ_WRITE"
            }{% if not loop.last %},{% endif %}
          {% endfor %}]
      when: non_reserved_volumes | length > 0

    # 12. Add storage volumes (as before)
    - name: Adding storage volumes
      block:
        # Check that the storage system exists
        - name: Check for valid storage system
          uri:
            url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/nodes/{{ item.node.name|urlencode }}"
            user: "{{ hsuser }}"
            password: "{{ password }}"
            method: GET
            body: ''
            force_basic_auth: yes
            status_code: 200
            body_format: json
            validate_certs: no
            timeout: 60
          register: __node_results
          failed_when:
            - __node_results.status == 500
          loop: "{{ volumes_for_next_task }}"
          loop_control:
            label: "{{ item.name }}"

        - name: Fail if storage system not found
          fail:
            msg: "Storage System {{ item.item.node.name }} not found"
          when: item.status == 404
          loop: "{{ __node_results.results }}"
          loop_control:
            label: "{{ item.item.node.name }}"

        # Add storage volumes
        - name: Add the storage volume
          uri:
            url: "https://{{ data_cluster_mgmt_ip }}:8443/mgmt/v1.2/rest/storage-volumes?force=true&skipPerfTest=false&createPlacementObjectives=true"
            user: "{{ hsuser }}"
            password: "{{ password }}"
            method: POST
            body: '{{ item }}'
            force_basic_auth: yes
            status_code: 202
            body_format: json
            validate_certs: no
            timeout: 180
          register: __results
          failed_when:
            - __results.status == 500
          loop: "{{ volumes_for_next_task }}"
          loop_control:
            label: "{{ item.name }}"

        # Wait for completion
        - name: Check status of add storage volume
          uri:
            url: "{{ item.location }}"
            user: "{{ hsuser }}"
            password: "{{ password }}"
            method: GET
            body: '{}'
            force_basic_auth: yes
            status_code: 200
            body_format: json
            validate_certs: no
          register: _result
          until: _result.json.status == "COMPLETED"
          retries: 10
          delay: 5
          when: item.status == 202
          loop: "{{ __results.results }}"
          loop_control:
            label: "{{ item.item.name }}"

      when: non_reserved_volumes | length > 0
